/**
 *Submitted for verification at BscScan.com on 2022-03-21
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.6.10;

interface BEP20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}

contract Wider is BEP20 ,Context {

    string private   constant name = "Wider"; 
    string private   constant symbol = "WD";
    uint8  private  constant decimals = 0;
        
    address private _previousOwner;
    uint256 private _lockTime;
   
    mapping(address => uint256) balances;
    mapping(address => mapping (address => uint256)) allowed;
    address public _owner;
    uint private   totalSupply_=1000;
    using SafeMath for uint256;
   receive() external payable {}
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

     constructor() public 
      {
        balances[msg.sender] = totalSupply_;
        _owner=msg.sender;
        emit OwnershipTransferred(address(0), _msgSender());
    }
    function totalSupply() public override view returns (uint256) 
    {
    return totalSupply_;
    }

    function balanceOf(address tokenOwner) external  override  view returns (uint256)
     {
        return balances[tokenOwner];
     }

    // function sendValue(address payable recipient, uint256 amount) public  {
    //         require(address(this).balance >= amount, "Address: insufficient balance");

    //         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
    //         (bool success, ) = recipient.call{ value: amount }("");
    //         require(success, "Address: unable to send value, recipient may have reverted");
    //     }
 
        modifier onlyOwner() {
            require(_owner == _msgSender(), "Ownable: caller is not the owner");
            _;
        }
      function renounceOwnership() private  onlyOwner 
      {
            emit OwnershipTransferred(_owner, address(0));
            _owner = address(0);
      }

    function transferOwnership(address newOwner) private   onlyOwner 
    {
            require(newOwner != address(0), "Ownable: new owner is the zero address");
            emit OwnershipTransferred(_owner, newOwner);
            _owner = newOwner;
     }
    


    function geUnlockTime() public view returns (uint256) 
    {
                return _lockTime;
    }

     
    function lock(uint256 time) public virtual onlyOwner 
    {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }
 

 
    function unlock() public virtual {
            require(_previousOwner == msg.sender, "You don't have permission to unlock");
            require(block.timestamp < _lockTime , "Contract is locked until 7 days");
            emit OwnershipTransferred(_owner, _previousOwner);
            _owner = _previousOwner;
    }
  


}

library SafeMath {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
      assert(b <= a);
      return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
      uint256 c = a + b;
      assert(c >= a);
      return c;
    }
}
